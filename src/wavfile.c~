/*
 * A simple sound library by Douglas Thain
 * Modified by Nick Gunia
 * Specification:
 * http://www.nd.edu/~dthain/courses/cse20211/fall2013/wavfile
*/

#include "wavfile.h"
#include <math.h>
#include <stdlib.h>
#include <string.h>

struct wavfile_header {
	char	riff_tag[4];
	int	riff_length;
	char	wave_tag[4];
	char	fmt_tag[4];
	int	fmt_length;
	short	audio_format;
	short	num_channels;
	int	sample_rate;
	int	byte_rate;
	short	block_align;
	short	bits_per_sample;
	char	data_tag[4];
	int	data_length;
};

/*
 * function: scaleOutputSampleFreq
 * --------------------
 * sets output frequency to play at specified BPM
 * 
 * BPM: int value of beats per minute
 *
 * returns modified output sampling frequency
 */
int scaleOutputSampleFreq(int BPM) {

	// at 44100 Hz, 1 beat per second
	float scaleSampleRate = BPM/60.0;
	int sampleFreq = (int)roundf(scaleSampleRate*WAVFILE_SAMPLES_PER_SECOND);

	// ensure a minimum output frequency
	if (sampleFreq < 100) {
		printf("minimum output frequency violated, setting to 40 Hz (~0.5 BPM)\n");
		sampleFreq = 100;
	}	

	// make sure maximum output frequency isn't exceeded
	if (sampleFreq > 192000) {
		printf("minimum output frequency exceeded, setting to 192 kHz (~260 BPM)\n");
		sampleFreq = 192000;
	}	

	return sampleFreq;
}

FILE * wavfile_open( const char *filename, int BPM)
{
	struct wavfile_header header;

	int samples_per_second = scaleOutputSampleFreq(BPM);
	int bits_per_sample = 32;

	strncpy(header.riff_tag,"RIFF",4);
	strncpy(header.wave_tag,"WAVE",4);
	strncpy(header.fmt_tag,"fmt ",4);
	strncpy(header.data_tag,"data",4);

	header.riff_length = 0;
	header.fmt_length = 16;
	header.audio_format = 3;
	header.num_channels = 2;
	header.sample_rate = samples_per_second;
	header.byte_rate = samples_per_second*(bits_per_sample/8);
	header.block_align = bits_per_sample/8;
	header.bits_per_sample = bits_per_sample;
	header.data_length = 0;

	FILE * file = fopen(filename,"w+");
	if(!file) return 0;

	fwrite(&header,sizeof(header),1,file);

	fflush(file);

	return file;

}

void wavfile_write( FILE *file, float **data, int length, int size )
{
	int i;
	#pragma omp parallel for
	for(i = 0; i < size; i++) {
  		fwrite(data[i], sizeof(float),length,file);
	}
}

void wavfile_close( FILE *file )
{
	int file_length = ftell(file);

	int data_length = file_length - sizeof(struct wavfile_header);
	fseek(file,sizeof(struct wavfile_header) - sizeof(int),SEEK_SET);
	fwrite(&data_length,sizeof(data_length),1,file);

	int riff_length = file_length - 8;
	fseek(file,4,SEEK_SET);
	fwrite(&riff_length,sizeof(riff_length),1,file);

	fclose(file);
}
